---

- name: Make sure this is only run on a dell server
  assert:
    that: ansible_system_vendor is match('Dell.*')
    msg: "This role is only meant to be run on Dell systems"
  when: dell_dsu_assert

- name: include multipathd.yml if dell_dsu_manage_multipath_config is True
  include_tasks: multipathd.yml
  when: dell_dsu_manage_multipath_config

- name: Fetch Dell bootstrap script
  environment: "{{ proxy_env | default({}) }}"
  get_url:
    url: https://linux.dell.com/repo/hardware/dsu/bootstrap.cgi
    dest: /tmp/dell_bootstrap
    mode: 0755

- name: Change import GPG variable in script
  lineinfile:
    path: /tmp/dell_bootstrap
    regexp: '^IMPORT_GPG_CONFIRMATION="na"$'
    line: 'IMPORT_GPG_CONFIRMATION="yes"'
    backup: true

- name: Remove unsupported GPG key for AlmaLinux 9
  lineinfile:
    path: /tmp/dell_bootstrap
    regexp: '^(.*)857A9594(.*)$'
    line: '# \1857A9594\2'
    backup: true
  when:
    - ansible_facts['distribution'] == 'AlmaLinux'
    - ansible_facts['distribution_major_version'] == '9'

- name: Install Dell DSU repo
  environment: "{{ proxy_env | default({}) }}"
  command:
    cmd: /tmp/dell_bootstrap
    creates: /etc/yum.repos.d/dell-system-update.repo
  register: reg_install_dsu_repo
  when: dell_dsu_repo_install
  failed_when: "('Done!' not in reg_install_dsu_repo.stdout) and (reg_install_dsu_repo.rc != 0)"

- name: print reg_install_dsu_repo variable if verbosity is 1
  debug:
    var: reg_install_dsu_repo
    verbosity: 1

- name: create /usr/libexec/dell_dup
  file:
    path: /usr/libexec/dell_dup
    state: directory
    mode: '0755'
  when: dell_dsu_rollout_gpg_keys

- name: Installing Dell DSU RPM
  yum:
    name: dell-system-update
    state: latest

- name: Set categories_list
  set_fact:
    categories_list: "{{Â upgrade_categories.split(',') }}"
  when: (upgrade_categories is defined)

- name: Check if the arguments are well defined
  assert:
    that: firmware_components[item] is defined
  loop: "{{ categories_list }}"
  when: categories_list is defined

- name: Set dell_dsu_arguments
  set_fact:
    dell_dsu_arguments: "{{ dell_dsu_arguments_base }}{% if not dell_dsu_update_all_firmware %} --category={% set comma = joiner(',') %}{% for dsu_category in categories_list %}{{ comma() }}{{ firmware_components[dsu_category] }}{% endfor %}{% endif %}"
  when: (categories_list is defined) or (dell_dsu_update_all_firmware)

- name: Update firmware
  command: "dsu {{ dell_dsu_arguments }}"
  when: dell_dsu_arguments is defined
  register: command_result
  failed_when: command_result.rc not in dell_dsu_changed_exit_codes + dell_dsu_not_changed_exit_codes
  changed_when: command_result.rc in dell_dsu_changed_exit_codes
...
